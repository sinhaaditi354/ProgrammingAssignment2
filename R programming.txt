# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL  # Initialize the inverse as NULL
    
    # Function to set the matrix
    set <- function(y) {
        x <<- y
        inv <<- NULL  # Reset the inverse cache if matrix is updated
    }
    
    # Function to get the matrix
    get <- function() x
    
    # Function to set the inverse of the matrix
    setInverse <- function(inverse) inv <<- inverse
    
    # Function to get the inverse of the matrix
    getInverse <- function() inv
    
    # Return a list of functions
    list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}

# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix.
# If the inverse has already been calculated (and the matrix has not changed), 
# then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
    inv <- x$getInverse()  # Get the cached inverse
    
    # If the inverse is already cached, return it
    if(!is.null(inv)) {
        message("getting cached data")
        return(inv)
    }
    
    # If the inverse is not cached, calculate it
    data <- x$get()  # Get the matrix
    inv <- solve(data, ...)  # Compute the inverse
    x$setInverse(inv)  # Cache the computed inverse
    inv  # Return the inverse
}

# Example usage:
# Creating a special matrix
my_matrix <- makeCacheMatrix(matrix(c(1, 2, 3, 4), 2, 2))

# Calculating and caching the inverse
inverse_matrix <- cacheSolve(my_matrix)

# Retrieving the cached inverse
inverse_matrix <- cacheSolve(my_matrix)
